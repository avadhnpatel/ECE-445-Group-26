/* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/e0d67cbf-b9b7-4159-9bea-1acbae84dbc6 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  String door_open_status;
  String door_status;
  String mail_status;
  CloudSwitch lock_door;
  CloudSchedule schedule;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/
#include <HTTPClient.h>
#include <WiFiClientSecure.h>
#include "thingProperties.h"
#include <Servo.h>
#define DOOR_SENSOR_PIN  19  // ESP32 pin GIOP19 connected to door sensor's pin
#define SERVO_PIN 26 // ESP32 pin GIOP26 connected to servo motor
#define TRIG_PIN 23 // ESP32 pin GIOP23 connected to Ultrasonic Sensor's TRIG pin
#define ECHO_PIN 22 // ESP32 pin GIOP22 connected to Ultrasonic Sensor's ECHO pin
#define UNLOCK_POS 160
#define LOCK_POS 90
Servo servoMotor;
HTTPClient http;
bool validSchedule = true;
int timeRead = 0;
int doorState;
bool wasScheduleActive = false;
int prevDoorState = 0;
bool manual_lock = false;
float duration_us, distance_cm;
bool is_there_mail;
bool mail_check_open;

void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(115200);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500); 
  pinMode(DOOR_SENSOR_PIN, INPUT_PULLUP); // set ESP32 pin to input pull-up mode

  // configure the trigger pin to output mode
  pinMode(TRIG_PIN, OUTPUT);
  // configure the echo pin to input mode
  pinMode(ECHO_PIN, INPUT);
  servoMotor.attach(SERVO_PIN);  // attaches the servo on ESP32 pin
  servoMotor.write(160);
  // Defined in thingProperties.h
  initProperties();

  lock_door = 0;
  door_status = "Mailbox is Unlocked";
  door_open_status = "Door is closed";
  is_there_mail = checkMail();
  if(is_there_mail == true){
    mail_status = "You have mail";
  }
  else{
    mail_status = "You don't have mail";
  }
  
  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
}

void loop() {
  ArduinoCloud.update();
  if(schedule.isActive() && wasScheduleActive == false){
    //unlock motor
    servoMotor.write(UNLOCK_POS);
    sendMessage("Mailbox%20was%20Unlocked%20By%20Scheduler");
    lock_door = 0;
    manual_lock = false;
    door_status = "Mailbox is Unlocked";
    wasScheduleActive = true;
  }
  else if (!schedule.isActive() && wasScheduleActive == true){
    //lock motor
    // Serial.println("mailbox locked by scheduler");
    sendMessage("Mailbox%20was%20Locked%20By%20Scheduler");
    servoMotor.write(90);
    lock_door = 1;
    manual_lock = true;
    door_status = "Mailbox is Locked";
    wasScheduleActive = false;
  }
  else if (schedule.isActive() && manual_lock==false){
    // Your code here 
    wasScheduleActive = true;
    unlockDoorScheduler();
    doorState = digitalRead(DOOR_SENSOR_PIN); // read state
  
    if (doorState == HIGH) {
      door_open_status = "Door is Open";
      if (prevDoorState == 0){
        sendMessage("Mailbox%20Door%20Opened");
        Serial.println("door open");
      }
      mail_check_open = checkMail();
      if (mail_check_open == false && is_there_mail == true){
        is_there_mail = false;
        mail_status = "Mail has been taken out of the mailbox";
        sendMessage("Mail%20Was%20Taken%20Out%20Of%20Mailbox");
      }
      prevDoorState = 1;
      // Serial.println("The door is open");
    } else {
      door_open_status = "Door is Closed";
      ArduinoCloud.update();
      if (prevDoorState == 1) {
           // generate 10-microsecond pulse to TRIG pin
          digitalWrite(TRIG_PIN, HIGH);
          delayMicroseconds(10);
          digitalWrite(TRIG_PIN, LOW);
  
          // measure duration of pulse from ECHO pin
          duration_us = pulseIn(ECHO_PIN, HIGH);
  
          // calculate the distance
          distance_cm = 0.017 * duration_us;
  
          // print the value to Serial Monitor
          Serial.print("distance: ");
          Serial.print(distance_cm);
          Serial.println(" cm");
          if (distance_cm < 17) {
            doorState = digitalRead(DOOR_SENSOR_PIN); // read state
            while(doorState == HIGH){
              doorState = digitalRead(DOOR_SENSOR_PIN); // read state
              if (doorState != HIGH){
                break;
              }
            }
            doorState = digitalRead(DOOR_SENSOR_PIN); // read state
            sendMessage("You%20Got%20Mail");
            Serial.println("You Got Mail");
            is_there_mail = true;
            mail_status = "You have mail";
          }
          else if (is_there_mail == true){
            is_there_mail = false;
            mail_status = "Mail has been taken out of the mailbox";
            sendMessage("Mail%20Was%20Taken%20Out%20Of%20Mailbox");
          }
          else{
            is_there_mail = false;
            mail_status = "You do not have mail";
          }
          sendMessage("Mailbox%20Door%20Closed");
          Serial.println("The door is closed");
      }
      prevDoorState = 0;
    }
  }
  else{
    // Your code here 
    doorState = digitalRead(DOOR_SENSOR_PIN); // read state
  
    if (doorState == HIGH) {
      door_open_status = "Door is Open";
      if (prevDoorState == 0){
        sendMessage("Mailbox%20Door%20Opened");
        Serial.println("door open");
      }
      mail_check_open = checkMail();
      if (mail_check_open == false && is_there_mail == true){
        is_there_mail = false;
        mail_status = "Mail has been taken out of the mailbox";
        sendMessage("Mail%20Was%20Taken%20Out%20Of%20Mailbox");
      }
      prevDoorState = 1;
      // Serial.println("The door is open");
    } else {
      door_open_status = "Door is Closed";
      ArduinoCloud.update();
      if (prevDoorState == 1) {
           // generate 10-microsecond pulse to TRIG pin
          digitalWrite(TRIG_PIN, HIGH);
          delayMicroseconds(10);
          digitalWrite(TRIG_PIN, LOW);
  
          // measure duration of pulse from ECHO pin
          duration_us = pulseIn(ECHO_PIN, HIGH);
  
          // calculate the distance
          distance_cm = 0.017 * duration_us;
          // print the value to Serial Monitor
          Serial.print("distance: ");
          Serial.print(distance_cm);
          Serial.println(" cm");
          if (distance_cm < 17) {
            delay(9000);
            doorState = digitalRead(DOOR_SENSOR_PIN); // read state
            while(doorState == HIGH){
              doorState = digitalRead(DOOR_SENSOR_PIN); // read state
              if (doorState != HIGH){
                break;
              }
            }
            doorState = digitalRead(DOOR_SENSOR_PIN); // read state
            // generate 10-microsecond pulse to TRIG pin
            digitalWrite(TRIG_PIN, HIGH);
            delayMicroseconds(10);
            digitalWrite(TRIG_PIN, LOW);

            // measure duration of pulse from ECHO pin
            duration_us = pulseIn(ECHO_PIN, HIGH);

            // calculate the distance
            distance_cm = 0.017 * duration_us;
            // print the value to Serial Monitor
            Serial.print("distance: ");
            Serial.print(distance_cm);
            Serial.println(" cm");
            if (distance_cm < 17) {
              sendMessage("You%20Got%20Mail");
              Serial.println("You Got Mail");
              is_there_mail = true;
              mail_status = "You have mail";
              lockDoor();
            }
            else{
              is_there_mail = false;
              mail_status = "Mail was taken out of mailbox";
              sendMessage("Mail%20Was%20Taken%20Out%20Of%20Mailbox");
              Serial.println("The door is closed");
            }
          }
          else if (is_there_mail == true){
            is_there_mail = false;
            mail_status = "Mail has been taken out of the mailbox";
            sendMessage("Mail%20Was%20Taken%20Out%20Of%20Mailbox");
          }          
          else{
            sendMessage("Mailbox%20Door%20Closed");
            is_there_mail = false;
            mail_status = "You do not have mail";
            Serial.println("The door is closed");
          }
      }
      prevDoorState = 0;
    }
  }
}

void unlockDoorScheduler(){
  servoMotor.write(UNLOCK_POS);
  lock_door = 0;
  manual_lock = false;
  door_status = "Mailbox is Unlocked";
}

void unlockDoor() {
  // rotates from 0 degrees to 180 degrees
  servoMotor.write(UNLOCK_POS);
  lock_door = 0;
  manual_lock = false;
  door_status = "Mailbox is Unlocked";
  sendMessage("Mailbox%20was%20Unlocked");
  Serial.println("sent unlocked");
}

void lockDoor() {
  // rotates from 0 degrees to 180 degrees
  servoMotor.write(LOCK_POS);
  lock_door = 1;
  door_status = "Mailbox is Locked";
  sendMessage("Mailbox%20was%20Locked");
  Serial.println("sent locked");
}

void manualLockDoor() {
  // rotates from 0 degrees to 180 degrees
  servoMotor.write(LOCK_POS);
  lock_door = 1;
  manual_lock = true;
  door_status = "Mailbox is Locked";
  Serial.println("sent locked");
}

void manualUnlockDoor() {
  // rotates from 0 degrees to 180 degrees
  servoMotor.write(UNLOCK_POS);
  lock_door = 0;
  manual_lock = false;
  door_status = "Mailbox is Unlocked";
  Serial.println("sent unlocked");
}

void sendMessage(String message){
  http.begin("https://maker.ifttt.com/trigger/door/with/key/i3aPR2ByKa88PNsUl4k8Lpf8Q57lfJGn4m5wlFlwM8k?value1="+message);
  http.GET();
  http.end();
}

bool checkMail(){
    // generate 10-microsecond pulse to TRIG pin
    digitalWrite(TRIG_PIN, HIGH);
    delayMicroseconds(10);
    digitalWrite(TRIG_PIN, LOW);

    // measure duration of pulse from ECHO pin
    duration_us = pulseIn(ECHO_PIN, HIGH);

    // calculate the distance
    distance_cm = 0.017 * duration_us;
    // print the value to Serial Monitor
    // Serial.print("distance: ");
    // Serial.print(distance_cm);
    // Serial.println(" cm");
    if (distance_cm < 17) {
      return true;
    }
    return false;
}

/*
  Since LockDoor is READ_WRITE variable, onLockDoorChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onLockDoorChange()  {
  // Add your code here to act upon LockDoor change
  if(lock_door == 1){
    manualLockDoor();
  }
  else{
    manualUnlockDoor();
  }
}

void onScheduleChange(){
  
}
